schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Equipment @aws_api_key @aws_iam {
  BearingSize: String
  DriveBeltSize: String
  GearBoxSize: String
  Location: Location
  ServiceDates(filter: ModelServiceDateFilterInput, limit: Int, nextToken: String, sortDirection: DESC): ModelServiceDateConnection
  createdAt: AWSDateTime!
  cupSize: String
  id: ID!
  locationID: ID!
  name: String
  updatedAt: AWSDateTime!
}

type Location @aws_api_key @aws_iam {
  Equipment(filter: ModelEquipmentFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelEquipmentConnection
  Name: String
  createdAt: AWSDateTime!
  id: ID!
  updatedAt: AWSDateTime!
}

type ModelEquipmentConnection @aws_api_key @aws_iam {
  items: [Equipment]!
  nextToken: String
}

type ModelLocationConnection @aws_api_key @aws_iam {
  items: [Location]!
  nextToken: String
}

type ModelServiceDateConnection @aws_api_key @aws_iam {
  items: [ServiceDate]!
  nextToken: String
}

type Mutation {
  createEquipment(condition: ModelEquipmentConditionInput, input: CreateEquipmentInput!): Equipment @aws_api_key @aws_iam
  createLocation(condition: ModelLocationConditionInput, input: CreateLocationInput!): Location @aws_api_key @aws_iam
  createServiceDate(condition: ModelServiceDateConditionInput, input: CreateServiceDateInput!): ServiceDate @aws_api_key @aws_iam
  deleteEquipment(condition: ModelEquipmentConditionInput, input: DeleteEquipmentInput!): Equipment @aws_api_key @aws_iam
  deleteLocation(condition: ModelLocationConditionInput, input: DeleteLocationInput!): Location @aws_api_key @aws_iam
  deleteServiceDate(condition: ModelServiceDateConditionInput, input: DeleteServiceDateInput!): ServiceDate @aws_api_key @aws_iam
  updateEquipment(condition: ModelEquipmentConditionInput, input: UpdateEquipmentInput!): Equipment @aws_api_key @aws_iam
  updateLocation(condition: ModelLocationConditionInput, input: UpdateLocationInput!): Location @aws_api_key @aws_iam
  updateServiceDate(condition: ModelServiceDateConditionInput, input: UpdateServiceDateInput!): ServiceDate @aws_api_key @aws_iam
}

type Query {
  equipmentByLocationID(filter: ModelEquipmentFilterInput, limit: Int, locationID: ID!, nextToken: String, sortDirection: ModelSortDirection): ModelEquipmentConnection @aws_api_key @aws_iam
  getEquipment(id: ID!): Equipment @aws_api_key @aws_iam
  getLocation(id: ID!): Location @aws_api_key @aws_iam
  getServiceDate(id: ID!): ServiceDate @aws_api_key @aws_iam
  listEquipment(filter: ModelEquipmentFilterInput, limit: Int, nextToken: String): ModelEquipmentConnection @aws_api_key @aws_iam
  listLocations(filter: ModelLocationFilterInput, limit: Int, nextToken: String): ModelLocationConnection @aws_api_key @aws_iam
  listServiceDates(filter: ModelServiceDateFilterInput, limit: Int, nextToken: String): ModelServiceDateConnection @aws_api_key @aws_iam
  serviceDatesByEquipmentID(equipmentID: ID!, filter: ModelServiceDateFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelServiceDateConnection @aws_api_key @aws_iam
}

type ServiceDate @aws_api_key @aws_iam @key(fields : ["createdAt"]) {
  CheckedBearings: Boolean
  CheckedBelt: Boolean
  Greased: Boolean
  ServiceDate: AWSDate
  createdAt: AWSDateTime!
  equipmentID: ID!
  id: ID!
  notes: String
  updatedAt: AWSDateTime!
}

type Subscription {
  onCreateEquipment(filter: ModelSubscriptionEquipmentFilterInput): Equipment @aws_api_key @aws_iam @aws_subscribe(mutations : ["createEquipment"])
  onCreateLocation(filter: ModelSubscriptionLocationFilterInput): Location @aws_api_key @aws_iam @aws_subscribe(mutations : ["createLocation"])
  onCreateServiceDate(filter: ModelSubscriptionServiceDateFilterInput): ServiceDate @aws_api_key @aws_iam @aws_subscribe(mutations : ["createServiceDate"])
  onDeleteEquipment(filter: ModelSubscriptionEquipmentFilterInput): Equipment @aws_api_key @aws_iam @aws_subscribe(mutations : ["deleteEquipment"])
  onDeleteLocation(filter: ModelSubscriptionLocationFilterInput): Location @aws_api_key @aws_iam @aws_subscribe(mutations : ["deleteLocation"])
  onDeleteServiceDate(filter: ModelSubscriptionServiceDateFilterInput): ServiceDate @aws_api_key @aws_iam @aws_subscribe(mutations : ["deleteServiceDate"])
  onUpdateEquipment(filter: ModelSubscriptionEquipmentFilterInput): Equipment @aws_api_key @aws_iam @aws_subscribe(mutations : ["updateEquipment"])
  onUpdateLocation(filter: ModelSubscriptionLocationFilterInput): Location @aws_api_key @aws_iam @aws_subscribe(mutations : ["updateLocation"])
  onUpdateServiceDate(filter: ModelSubscriptionServiceDateFilterInput): ServiceDate @aws_api_key @aws_iam @aws_subscribe(mutations : ["updateServiceDate"])
}

enum ModelAttributeTypes {
  _null
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
}

enum ModelSortDirection {
  ASC
  DESC
}

input CreateEquipmentInput {
  BearingSize: String
  DriveBeltSize: String
  GearBoxSize: String
  cupSize: String
  id: ID
  locationID: ID!
  name: String
}

input CreateLocationInput {
  Name: String
  id: ID
}

input CreateServiceDateInput {
  CheckedBearings: Boolean
  CheckedBelt: Boolean
  Greased: Boolean
  ServiceDate: AWSDate
  equipmentID: ID!
  id: ID
  notes: String
}

input DeleteEquipmentInput {
  id: ID!
}

input DeleteLocationInput {
  id: ID!
}

input DeleteServiceDateInput {
  id: ID!
}

input ModelBooleanInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  eq: Boolean
  ne: Boolean
}

input ModelEquipmentConditionInput {
  BearingSize: ModelStringInput
  DriveBeltSize: ModelStringInput
  GearBoxSize: ModelStringInput
  and: [ModelEquipmentConditionInput]
  cupSize: ModelStringInput
  locationID: ModelIDInput
  name: ModelStringInput
  not: ModelEquipmentConditionInput
  or: [ModelEquipmentConditionInput]
}

input ModelEquipmentFilterInput {
  BearingSize: ModelStringInput
  DriveBeltSize: ModelStringInput
  GearBoxSize: ModelStringInput
  and: [ModelEquipmentFilterInput]
  cupSize: ModelStringInput
  id: ModelIDInput
  locationID: ModelIDInput
  name: ModelStringInput
  not: ModelEquipmentFilterInput
  or: [ModelEquipmentFilterInput]
}

input ModelFloatInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
}

input ModelIDInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  size: ModelSizeInput
}

input ModelIntInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelLocationConditionInput {
  Name: ModelStringInput
  and: [ModelLocationConditionInput]
  not: ModelLocationConditionInput
  or: [ModelLocationConditionInput]
}

input ModelLocationFilterInput {
  Name: ModelStringInput
  and: [ModelLocationFilterInput]
  id: ModelIDInput
  not: ModelLocationFilterInput
  or: [ModelLocationFilterInput]
}

input ModelServiceDateConditionInput {
  CheckedBearings: ModelBooleanInput
  CheckedBelt: ModelBooleanInput
  Greased: ModelBooleanInput
  ServiceDate: ModelStringInput
  and: [ModelServiceDateConditionInput]
  equipmentID: ModelIDInput
  not: ModelServiceDateConditionInput
  notes: ModelStringInput
  or: [ModelServiceDateConditionInput]
}

input ModelServiceDateFilterInput {
  CheckedBearings: ModelBooleanInput
  CheckedBelt: ModelBooleanInput
  Greased: ModelBooleanInput
  ServiceDate: ModelStringInput
  and: [ModelServiceDateFilterInput]
  equipmentID: ModelIDInput
  id: ModelIDInput
  not: ModelServiceDateFilterInput
  notes: ModelStringInput
  or: [ModelServiceDateFilterInput]
}

input ModelSizeInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
}

input ModelStringInput {
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
  size: ModelSizeInput
}

input ModelSubscriptionBooleanInput {
  eq: Boolean
  ne: Boolean
}

input ModelSubscriptionEquipmentFilterInput {
  BearingSize: ModelSubscriptionStringInput
  DriveBeltSize: ModelSubscriptionStringInput
  GearBoxSize: ModelSubscriptionStringInput
  and: [ModelSubscriptionEquipmentFilterInput]
  cupSize: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  locationID: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  or: [ModelSubscriptionEquipmentFilterInput]
}

input ModelSubscriptionFloatInput {
  between: [Float]
  eq: Float
  ge: Float
  gt: Float
  in: [Float]
  le: Float
  lt: Float
  ne: Float
  notIn: [Float]
}

input ModelSubscriptionIDInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  in: [ID]
  le: ID
  lt: ID
  ne: ID
  notContains: ID
  notIn: [ID]
}

input ModelSubscriptionIntInput {
  between: [Int]
  eq: Int
  ge: Int
  gt: Int
  in: [Int]
  le: Int
  lt: Int
  ne: Int
  notIn: [Int]
}

input ModelSubscriptionLocationFilterInput {
  Name: ModelSubscriptionStringInput
  and: [ModelSubscriptionLocationFilterInput]
  id: ModelSubscriptionIDInput
  or: [ModelSubscriptionLocationFilterInput]
}

input ModelSubscriptionServiceDateFilterInput {
  CheckedBearings: ModelSubscriptionBooleanInput
  CheckedBelt: ModelSubscriptionBooleanInput
  Greased: ModelSubscriptionBooleanInput
  ServiceDate: ModelSubscriptionStringInput
  and: [ModelSubscriptionServiceDateFilterInput]
  equipmentID: ModelSubscriptionIDInput
  id: ModelSubscriptionIDInput
  notes: ModelSubscriptionStringInput
  or: [ModelSubscriptionServiceDateFilterInput]
}

input ModelSubscriptionStringInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  in: [String]
  le: String
  lt: String
  ne: String
  notContains: String
  notIn: [String]
}

input UpdateEquipmentInput {
  BearingSize: String
  DriveBeltSize: String
  GearBoxSize: String
  cupSize: String
  id: ID!
  locationID: ID
  name: String
}

input UpdateLocationInput {
  Name: String
  id: ID!
}

input UpdateServiceDateInput {
  CheckedBearings: Boolean
  CheckedBelt: Boolean
  Greased: Boolean
  ServiceDate: AWSDate
  equipmentID: ID
  id: ID!
  notes: String
}
